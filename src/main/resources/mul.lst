
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -C -a -o mul.tmp -L mul.lst --verbose-list -l mul.sym -D LINKING= mul.asm
; Mon Apr  5 10:33:30 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=					LINKING=

;******  Processing input file: mul.asm

					                .enc "screen"

					*               = $02
					.dsection       zeropage
					.cerror         * > $30, "To many zero page variables!"

					*               = $1000
					.dsection       code
					.cerror         * > $1fff, "Program section is too long!"

					*               = $2000
					.dsection       data
					.cerror         * > $2fff, "Data section is too long!"


					.section        zeropage
>0002					num1            .byte   ?
>0003					num2            .byte   ?
>0004					rl              .byte   ?
>0005					rh              .byte   ?
>0006					xtmp            .byte   ?
					.send

					.section        code
.1000	a9 50		lda #$50	                lda     #80
.1002	85 02		sta $02		                sta     num1
.1004	a9 50		lda #$50	                lda     #80
.1006	85 03		sta $03		                sta     num2
.1008	20 0e 10	jsr $100e	                jsr     mul
.100b	4c 0b 10	jmp $100b	                jmp     *

.100e					mul             .proc
.100e	a6 02		ldx $02		                ldx     num1
.1010	a4 03		ldy $03		                ldy		num2

.1012	86 06		stx $06		                stx     xtmp     ;storing X for later use
.1014	98		tya		                tya
.1015	45 06		eor $06		                eor     xtmp     ;getting the sign of the final product
.1017	30 2b		bmi $1044	                bmi     neg      ;take another routine if the final product will be negative



.1019	bd 00 22	lda $2200,x	                lda     abs,x    ;this is the (a+b) part, we strip a&b from their signs using the abs table.
.101c	18		clc		                clc              ;it is safe to force both numbers to be positive knowing the final sign of the product which we will set later
.101d	79 00 22	adc $2200,y	                adc     abs,y    ;this is done to avoid overflows, and the extra code/tables needed to handle them.
.1020	85 06		sta $06		                sta     xtmp

.1022	bd 00 22	lda $2200,x	                lda     abs,x    ;(abs(a)-abs(b))
.1025	38		sec		                sec
.1026	f9 00 22	sbc $2200,y	                sbc     abs,y
.1029	a8		tay		                tay

.102a	be 00 22	ldx $2200,y	                ldx     abs,y   ;((a-b)/2)^2 will be always positive so its safe to do abs(a-b)
.102d	a4 06		ldy $06		                ldy     xtmp    ;we do this since the sqr table can only handle positive numbers


					                ;now we have a+b in Y and a-b in X


					                                ;low 8 bits of the product calculated here
.102f	b9 00 20	lda $2000,y	                lda     sqrl,y  ;((a+b)/2)^2
.1032	38		sec		                sec
.1033	fd 00 20	sbc $2000,x	                sbc     sqrl,x  ;-((a-b)/2)^2
.1036	85 04		sta $04		                sta     rl
					                                ;same as above for high 8 bits
.1038	b9 00 21	lda $2100,y	                lda     sqrh,y
.103b	fd 00 21	sbc $2100,x	                sbc     sqrh,x
.103e	a8		tay		                tay
.103f	85 05		sta $05		                sta     rh
.1041	a6 04		ldx $04		                ldx     rl
.1043	60		rts		                rts

					                ;case for negative final product, all the same except inverting the result at the end.

.1044	bd 00 22	lda $2200,x	neg             lda     abs,x
.1047	18		clc		                clc
.1048	79 00 22	adc $2200,y	                adc     abs,y
.104b	85 06		sta $06		                sta     xtmp

.104d	bd 00 22	lda $2200,x	                lda     abs,x
.1050	38		sec		                sec
.1051	f9 00 22	sbc $2200,y	                sbc     abs,y
.1054	a8		tay		                tay

.1055	be 00 22	ldx $2200,y	                ldx     abs,y
.1058	a4 06		ldy $06		                ldy     xtmp

.105a	b9 00 20	lda $2000,y	                lda     sqrl,y
.105d	38		sec		                sec
.105e	fd 00 20	sbc $2000,x	                sbc     sqrl,x
.1061	85 04		sta $04		                sta     rl

.1063	b9 00 21	lda $2100,y	                lda     sqrh,y
.1066	fd 00 21	sbc $2100,x	                sbc     sqrh,x
.1069	85 05		sta $05		                sta     rh

					                ;inverting the result's sign
.106b	a5 04		lda $04		                lda     rl
.106d	49 ff		eor #$ff	                eor     #$ff
.106f	18		clc		                clc
.1070	69 01		adc #$01	                adc     #$01
.1072	85 04		sta $04		                sta     rl
.1074	a5 05		lda $05		                lda     rh
.1076	49 ff		eor #$ff	                eor     #$ff
.1078	69 00		adc #$00	                adc     #$00
.107a	85 05		sta $05		                sta     rh
.107c	a4 05		ldy $05		                ldy     rh
.107e	a6 04		ldx $04		                ldx     rl
.1080	60		rts		                rts

					                .pend

					.send

					.section        data
					.include		"tables.asm"

;******  Processing file: tables.asm


>2000					.align 256
.2000					sqrl
>2000	00 00 01 02 04 06 09 0c		     .byte $00, $00, $01, $02, $04, $06, $09, $0c
>2008	10 14 19 1e 24 2a 31 38		     .byte $10, $14, $19, $1e, $24, $2a, $31, $38
>2010	40 48 51 5a 64 6e 79 84		     .byte $40, $48, $51, $5a, $64, $6e, $79, $84
>2018	90 9c a9 b6 c4 d2 e1 f0		     .byte $90, $9c, $a9, $b6, $c4, $d2, $e1, $f0
>2020	00 10 21 32 44 56 69 7c		     .byte $00, $10, $21, $32, $44, $56, $69, $7c
>2028	90 a4 b9 ce e4 fa 11 28		     .byte $90, $a4, $b9, $ce, $e4, $fa, $11, $28
>2030	40 58 71 8a a4 be d9 f4		     .byte $40, $58, $71, $8a, $a4, $be, $d9, $f4
>2038	10 2c 49 66 84 a2 c1 e0		     .byte $10, $2c, $49, $66, $84, $a2, $c1, $e0
>2040	00 20 41 62 84 a6 c9 ec		     .byte $00, $20, $41, $62, $84, $a6, $c9, $ec
>2048	10 34 59 7e a4 ca f1 18		     .byte $10, $34, $59, $7e, $a4, $ca, $f1, $18
>2050	40 68 91 ba e4 0e 39 64		     .byte $40, $68, $91, $ba, $e4, $0e, $39, $64
>2058	90 bc e9 16 44 72 a1 d0		     .byte $90, $bc, $e9, $16, $44, $72, $a1, $d0
>2060	00 30 61 92 c4 f6 29 5c		     .byte $00, $30, $61, $92, $c4, $f6, $29, $5c
>2068	90 c4 f9 2e 64 9a d1 08		     .byte $90, $c4, $f9, $2e, $64, $9a, $d1, $08
>2070	40 78 b1 ea 24 5e 99 d4		     .byte $40, $78, $b1, $ea, $24, $5e, $99, $d4
>2078	10 4c 89 c6 04 42 81 c0		     .byte $10, $4c, $89, $c6, $04, $42, $81, $c0
>2080	00 40 81 c2 04 46 89 cc		     .byte $00, $40, $81, $c2, $04, $46, $89, $cc
>2088	10 54 99 de 24 6a b1 f8		     .byte $10, $54, $99, $de, $24, $6a, $b1, $f8
>2090	40 88 d1 1a 64 ae f9 44		     .byte $40, $88, $d1, $1a, $64, $ae, $f9, $44
>2098	90 dc 29 76 c4 12 61 b0		     .byte $90, $dc, $29, $76, $c4, $12, $61, $b0
>20a0	00 50 a1 f2 44 96 e9 3c		     .byte $00, $50, $a1, $f2, $44, $96, $e9, $3c
>20a8	90 e4 39 8e e4 3a 91 e8		     .byte $90, $e4, $39, $8e, $e4, $3a, $91, $e8
>20b0	40 98 f1 4a a4 fe 59 b4		     .byte $40, $98, $f1, $4a, $a4, $fe, $59, $b4
>20b8	10 6c c9 26 84 e2 41 a0		     .byte $10, $6c, $c9, $26, $84, $e2, $41, $a0
>20c0	00 60 c1 22 84 e6 49 ac		     .byte $00, $60, $c1, $22, $84, $e6, $49, $ac
>20c8	10 74 d9 3e a4 0a 71 d8		     .byte $10, $74, $d9, $3e, $a4, $0a, $71, $d8
>20d0	40 a8 11 7a e4 4e b9 24		     .byte $40, $a8, $11, $7a, $e4, $4e, $b9, $24
>20d8	90 fc 69 d6 44 b2 21 90		     .byte $90, $fc, $69, $d6, $44, $b2, $21, $90
>20e0	00 70 e1 52 c4 36 a9 1c		     .byte $00, $70, $e1, $52, $c4, $36, $a9, $1c
>20e8	90 04 79 ee 64 da 51 c8		     .byte $90, $04, $79, $ee, $64, $da, $51, $c8
>20f0	40 b8 31 aa 24 9e 19 94		     .byte $40, $b8, $31, $aa, $24, $9e, $19, $94
>20f8	10 8c 09 86 04 82 01 80		     .byte $10, $8c, $09, $86, $04, $82, $01, $80

>2100					.align 256
.2100					sqrh
>2100	00 00 00 00 00 00 00 00		     .byte $00, $00, $00, $00, $00, $00, $00, $00
>2108	00 00 00 00 00 00 00 00		     .byte $00, $00, $00, $00, $00, $00, $00, $00
>2110	00 00 00 00 00 00 00 00		     .byte $00, $00, $00, $00, $00, $00, $00, $00
>2118	00 00 00 00 00 00 00 00		     .byte $00, $00, $00, $00, $00, $00, $00, $00
>2120	01 01 01 01 01 01 01 01		     .byte $01, $01, $01, $01, $01, $01, $01, $01
>2128	01 01 01 01 01 01 02 02		     .byte $01, $01, $01, $01, $01, $01, $02, $02
>2130	02 02 02 02 02 02 02 02		     .byte $02, $02, $02, $02, $02, $02, $02, $02
>2138	03 03 03 03 03 03 03 03		     .byte $03, $03, $03, $03, $03, $03, $03, $03
>2140	04 04 04 04 04 04 04 04		     .byte $04, $04, $04, $04, $04, $04, $04, $04
>2148	05 05 05 05 05 05 05 06		     .byte $05, $05, $05, $05, $05, $05, $05, $06
>2150	06 06 06 06 06 07 07 07		     .byte $06, $06, $06, $06, $06, $07, $07, $07
>2158	07 07 07 08 08 08 08 08		     .byte $07, $07, $07, $08, $08, $08, $08, $08
>2160	09 09 09 09 09 09 0a 0a		     .byte $09, $09, $09, $09, $09, $09, $0a, $0a
>2168	0a 0a 0a 0b 0b 0b 0b 0c		     .byte $0a, $0a, $0a, $0b, $0b, $0b, $0b, $0c
>2170	0c 0c 0c 0c 0d 0d 0d 0d		     .byte $0c, $0c, $0c, $0c, $0d, $0d, $0d, $0d
>2178	0e 0e 0e 0e 0f 0f 0f 0f		     .byte $0e, $0e, $0e, $0e, $0f, $0f, $0f, $0f
>2180	10 10 10 10 11 11 11 11		     .byte $10, $10, $10, $10, $11, $11, $11, $11
>2188	12 12 12 12 13 13 13 13		     .byte $12, $12, $12, $12, $13, $13, $13, $13
>2190	14 14 14 15 15 15 15 16		     .byte $14, $14, $14, $15, $15, $15, $15, $16
>2198	16 16 17 17 17 18 18 18		     .byte $16, $16, $17, $17, $17, $18, $18, $18
>21a0	19 19 19 19 1a 1a 1a 1b		     .byte $19, $19, $19, $19, $1a, $1a, $1a, $1b
>21a8	1b 1b 1c 1c 1c 1d 1d 1d		     .byte $1b, $1b, $1c, $1c, $1c, $1d, $1d, $1d
>21b0	1e 1e 1e 1f 1f 1f 20 20		     .byte $1e, $1e, $1e, $1f, $1f, $1f, $20, $20
>21b8	21 21 21 22 22 22 23 23		     .byte $21, $21, $21, $22, $22, $22, $23, $23
>21c0	24 24 24 25 25 25 26 26		     .byte $24, $24, $24, $25, $25, $25, $26, $26
>21c8	27 27 27 28 28 29 29 29		     .byte $27, $27, $27, $28, $28, $29, $29, $29
>21d0	2a 2a 2b 2b 2b 2c 2c 2d		     .byte $2a, $2a, $2b, $2b, $2b, $2c, $2c, $2d
>21d8	2d 2d 2e 2e 2f 2f 30 30		     .byte $2d, $2d, $2e, $2e, $2f, $2f, $30, $30
>21e0	31 31 31 32 32 33 33 34		     .byte $31, $31, $31, $32, $32, $33, $33, $34
>21e8	34 35 35 35 36 36 37 37		     .byte $34, $35, $35, $35, $36, $36, $37, $37
>21f0	38 38 39 39 3a 3a 3b 3b		     .byte $38, $38, $39, $39, $3a, $3a, $3b, $3b
>21f8	3c 3c 3d 3d 3e 3e 3f 3f		     .byte $3c, $3c, $3d, $3d, $3e, $3e, $3f, $3f

>2200					.align 256
.2200					abs
>2200	00 01 02 03 04 05 06 07		     .byte $00, $01, $02, $03, $04, $05, $06, $07
>2208	08 09 0a 0b 0c 0d 0e 0f		     .byte $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
>2210	10 11 12 13 14 15 16 17		     .byte $10, $11, $12, $13, $14, $15, $16, $17
>2218	18 19 1a 1b 1c 1d 1e 1f		     .byte $18, $19, $1a, $1b, $1c, $1d, $1e, $1f
>2220	20 21 22 23 24 25 26 27		     .byte $20, $21, $22, $23, $24, $25, $26, $27
>2228	28 29 2a 2b 2c 2d 2e 2f		     .byte $28, $29, $2a, $2b, $2c, $2d, $2e, $2f
>2230	30 31 32 33 34 35 36 37		     .byte $30, $31, $32, $33, $34, $35, $36, $37
>2238	38 39 3a 3b 3c 3d 3e 3f		     .byte $38, $39, $3a, $3b, $3c, $3d, $3e, $3f
>2240	40 41 42 43 44 45 46 47		     .byte $40, $41, $42, $43, $44, $45, $46, $47
>2248	48 49 4a 4b 4c 4d 4e 4f		     .byte $48, $49, $4a, $4b, $4c, $4d, $4e, $4f
>2250	50 51 52 53 54 55 56 57		     .byte $50, $51, $52, $53, $54, $55, $56, $57
>2258	58 59 5a 5b 5c 5d 5e 5f		     .byte $58, $59, $5a, $5b, $5c, $5d, $5e, $5f
>2260	60 61 62 63 64 65 66 67		     .byte $60, $61, $62, $63, $64, $65, $66, $67
>2268	68 69 6a 6b 6c 6d 6e 6f		     .byte $68, $69, $6a, $6b, $6c, $6d, $6e, $6f
>2270	70 71 72 73 74 75 76 77		     .byte $70, $71, $72, $73, $74, $75, $76, $77
>2278	78 79 7a 7b 7c 7d 7e 7f		     .byte $78, $79, $7a, $7b, $7c, $7d, $7e, $7f
>2280	80 7f 7e 7d 7c 7b 7a 79		     .byte $80, $7f, $7e, $7d, $7c, $7b, $7a, $79
>2288	78 77 76 75 74 73 72 71		     .byte $78, $77, $76, $75, $74, $73, $72, $71
>2290	70 6f 6e 6d 6c 6b 6a 69		     .byte $70, $6f, $6e, $6d, $6c, $6b, $6a, $69
>2298	68 67 66 65 64 63 62 61		     .byte $68, $67, $66, $65, $64, $63, $62, $61
>22a0	60 5f 5e 5d 5c 5b 5a 59		     .byte $60, $5f, $5e, $5d, $5c, $5b, $5a, $59
>22a8	58 57 56 55 54 53 52 51		     .byte $58, $57, $56, $55, $54, $53, $52, $51
>22b0	50 4f 4e 4d 4c 4b 4a 49		     .byte $50, $4f, $4e, $4d, $4c, $4b, $4a, $49
>22b8	48 47 46 45 44 43 42 41		     .byte $48, $47, $46, $45, $44, $43, $42, $41
>22c0	40 3f 3e 3d 3c 3b 3a 39		     .byte $40, $3f, $3e, $3d, $3c, $3b, $3a, $39
>22c8	38 37 36 35 34 33 32 31		     .byte $38, $37, $36, $35, $34, $33, $32, $31
>22d0	30 2f 2e 2d 2c 2b 2a 29		     .byte $30, $2f, $2e, $2d, $2c, $2b, $2a, $29
>22d8	28 27 26 25 24 23 22 21		     .byte $28, $27, $26, $25, $24, $23, $22, $21
>22e0	20 1f 1e 1d 1c 1b 1a 19		     .byte $20, $1f, $1e, $1d, $1c, $1b, $1a, $19
>22e8	18 17 16 15 14 13 12 11		     .byte $18, $17, $16, $15, $14, $13, $12, $11
>22f0	10 0f 0e 0d 0c 0b 0a 09		     .byte $10, $0f, $0e, $0d, $0c, $0b, $0a, $09
>22f8	08 07 06 05 04 03 02 01		     .byte $08, $07, $06, $05, $04, $03, $02, $01


;******  Return to file: mul.asm

					.send

;******  End of listing
